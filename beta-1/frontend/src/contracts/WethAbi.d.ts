/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
} from "fuels";

import type { Enum, Option } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface WethAbiInterface extends Interface {
  functions: {
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_supply: FunctionFragment;
    balance_of: FunctionFragment;
    allowance: FunctionFragment;
    deposit: FunctionFragment;
    withdraw: FunctionFragment;
    approve: FunctionFragment;
    transfer: FunctionFragment;
    transfer_from: FunctionFragment;
    increase_allowance: FunctionFragment;
    decrease_allowance: FunctionFragment;
  };

  encodeFunctionData(functionFragment: "name", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "symbol",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "total_supply",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "balance_of",
    values: [IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [IdentityInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "approve",
    values: [IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_from",
    values: [IdentityInput, IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "increase_allowance",
    values: [IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "decrease_allowance",
    values: [IdentityInput, BigNumberish]
  ): Uint8Array;

  decodeFunctionData(functionFragment: "name", data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: "symbol", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "total_supply",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "balance_of",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "allowance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "approve",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_from",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "increase_allowance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "decrease_allowance",
    data: BytesLike
  ): DecodedValue;
}

export class WethAbi extends Contract {
  interface: WethAbiInterface;
  functions: {
    name: InvokeFunction<[], string>;

    symbol: InvokeFunction<[], string>;

    total_supply: InvokeFunction<[], bigint>;

    balance_of: InvokeFunction<[account: IdentityInput], bigint>;

    allowance: InvokeFunction<
      [owner: IdentityInput, spender: IdentityInput],
      bigint
    >;

    deposit: InvokeFunction<[], void>;

    withdraw: InvokeFunction<[amount: BigNumberish], void>;

    approve: InvokeFunction<
      [spender: IdentityInput, amount: BigNumberish],
      boolean
    >;

    transfer: InvokeFunction<
      [to: IdentityInput, amount: BigNumberish],
      boolean
    >;

    transfer_from: InvokeFunction<
      [from: IdentityInput, to: IdentityInput, amount: BigNumberish],
      boolean
    >;

    increase_allowance: InvokeFunction<
      [spender: IdentityInput, added_amount: BigNumberish],
      boolean
    >;

    decrease_allowance: InvokeFunction<
      [spender: IdentityInput, subtracted_amount: BigNumberish],
      boolean
    >;
  };
}
