/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  ThunderExchangeAbi,
  ThunderExchangeAbiInterface,
} from "../ThunderExchangeAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "enum AccessError",
      components: [
        {
          name: "CannotReinitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 8,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 7,
          typeArguments: null,
        },
      ],
      typeParameters: [7],
    },
    {
      typeId: 5,
      type: "enum OrderError",
      components: [
        {
          name: "MismatchedAddress",
          type: 0,
          typeArguments: null,
        },
        {
          name: "StrategyNotWhitelisted",
          type: 0,
          typeArguments: null,
        },
        {
          name: "AssetNotSupported",
          type: 0,
          typeArguments: null,
        },
        {
          name: "WrongExpRange",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidAddress",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NonceCannotBeZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "PriceCannotBeZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "AmountCannotBeZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "ContractIdCannotBeZero",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "enum Side",
      components: [
        {
          name: "Buy",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Sell",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "struct MakerOrder",
      components: [
        {
          name: "side",
          type: 6,
          typeArguments: null,
        },
        {
          name: "maker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "collection",
          type: 9,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 16,
          typeArguments: null,
        },
        {
          name: "price",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 16,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 16,
          typeArguments: null,
        },
        {
          name: "strategy",
          type: 9,
          typeArguments: null,
        },
        {
          name: "payment_asset",
          type: 9,
          typeArguments: null,
        },
        {
          name: "start_time",
          type: 16,
          typeArguments: null,
        },
        {
          name: "end_time",
          type: 16,
          typeArguments: null,
        },
        {
          name: "extra_params",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "struct MakerOrderInput",
      components: [
        {
          name: "side",
          type: 6,
          typeArguments: null,
        },
        {
          name: "maker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "collection",
          type: 9,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 16,
          typeArguments: null,
        },
        {
          name: "price",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 16,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 16,
          typeArguments: null,
        },
        {
          name: "strategy",
          type: 9,
          typeArguments: null,
        },
        {
          name: "payment_asset",
          type: 9,
          typeArguments: null,
        },
        {
          name: "expiration_range",
          type: 16,
          typeArguments: null,
        },
        {
          name: "extra_params",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "struct OwnershipRenounced",
      components: [
        {
          name: "previous_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "struct OwnershipSet",
      components: [
        {
          name: "new_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "struct OwnershipTransferred",
      components: [
        {
          name: "new_owner",
          type: 3,
          typeArguments: null,
        },
        {
          name: "previous_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct TakerOrder",
      components: [
        {
          name: "side",
          type: 6,
          typeArguments: null,
        },
        {
          name: "taker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "maker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 16,
          typeArguments: null,
        },
        {
          name: "price",
          type: 16,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 16,
          typeArguments: null,
        },
        {
          name: "collection",
          type: 9,
          typeArguments: null,
        },
        {
          name: "strategy",
          type: 9,
          typeArguments: null,
        },
        {
          name: "extra_params",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "strategy",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "cancel_all_orders",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "strategy",
          type: 9,
          typeArguments: null,
        },
        {
          name: "side",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "cancel_all_orders_by_side",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "order",
          type: 10,
          typeArguments: null,
        },
      ],
      name: "cancel_order",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "order",
          type: 15,
          typeArguments: null,
        },
      ],
      name: "execute_order",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_asset_manager",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_execution_manager",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
        {
          name: "doc-comment",
          arguments: [" Getters ///"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_protocol_fee_recipient",
      output: {
        name: "",
        type: 3,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_royalty_manager",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_transfer_selector",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "initialize",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "owner",
      output: {
        name: "",
        type: 4,
        typeArguments: [
          {
            name: "",
            type: 3,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
        {
          name: "doc-comment",
          arguments: [" Ownable ///"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "order_input",
          type: 11,
          typeArguments: null,
        },
      ],
      name: "place_order",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "renounce_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset_manager",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "set_asset_manager",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "execution_manager",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "set_execution_manager",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "doc-comment",
          arguments: [" Setters ///"],
        },
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "protocol_fee_recipient",
          type: 3,
          typeArguments: null,
        },
      ],
      name: "set_protocol_fee_recipient",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "royalty_manager",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "set_royalty_manager",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "transfer_selector",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "set_transfer_selector",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "new_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      name: "transfer_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 14,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 15,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 16,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 17,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 18,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 19,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 20,
      loggedType: {
        name: "",
        type: 12,
        typeArguments: [],
      },
    },
    {
      logId: 21,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 22,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 23,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 24,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 25,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 26,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 27,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class ThunderExchangeAbi__factory {
  static readonly abi = _abi;
  static createInterface(): ThunderExchangeAbiInterface {
    return new Interface(_abi) as unknown as ThunderExchangeAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): ThunderExchangeAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as ThunderExchangeAbi;
  }
}
