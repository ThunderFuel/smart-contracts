/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  StrategyFixedPriceSaleAbi,
  StrategyFixedPriceSaleAbiInterface,
} from "../StrategyFixedPriceSaleAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "bool",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum AccessError",
      components: [
        {
          name: "CannotReinitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 8,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 7,
          typeArguments: null,
        },
      ],
      typeParameters: [7],
    },
    {
      typeId: 6,
      type: "enum Side",
      components: [
        {
          name: "Buy",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Sell",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "struct ExecutionResult",
      components: [
        {
          name: "is_executable",
          type: 2,
          typeArguments: null,
        },
        {
          name: "collection",
          type: 9,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 16,
          typeArguments: null,
        },
        {
          name: "payment_asset",
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "struct MakerOrder",
      components: [
        {
          name: "side",
          type: 6,
          typeArguments: null,
        },
        {
          name: "maker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "collection",
          type: 9,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 16,
          typeArguments: null,
        },
        {
          name: "price",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 16,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 16,
          typeArguments: null,
        },
        {
          name: "strategy",
          type: 9,
          typeArguments: null,
        },
        {
          name: "payment_asset",
          type: 9,
          typeArguments: null,
        },
        {
          name: "start_time",
          type: 16,
          typeArguments: null,
        },
        {
          name: "end_time",
          type: 16,
          typeArguments: null,
        },
        {
          name: "extra_params",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "struct OwnershipRenounced",
      components: [
        {
          name: "previous_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "struct OwnershipSet",
      components: [
        {
          name: "new_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "struct OwnershipTransferred",
      components: [
        {
          name: "new_owner",
          type: 4,
          typeArguments: null,
        },
        {
          name: "previous_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct TakerOrder",
      components: [
        {
          name: "side",
          type: 6,
          typeArguments: null,
        },
        {
          name: "taker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "maker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "nonce",
          type: 16,
          typeArguments: null,
        },
        {
          name: "price",
          type: 16,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 16,
          typeArguments: null,
        },
        {
          name: "collection",
          type: 9,
          typeArguments: null,
        },
        {
          name: "strategy",
          type: 9,
          typeArguments: null,
        },
        {
          name: "extra_params",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "maker",
          type: 8,
          typeArguments: null,
        },
      ],
      name: "cancel_all_orders",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "maker",
          type: 8,
          typeArguments: null,
        },
        {
          name: "side",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "cancel_all_orders_by_side",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "order",
          type: 11,
          typeArguments: null,
        },
      ],
      name: "cancel_order",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "order",
          type: 15,
          typeArguments: null,
        },
      ],
      name: "execute_order",
      output: {
        name: "",
        type: 10,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_protocol_fee",
      output: {
        name: "",
        type: 16,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "exchange",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "initialize",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "owner",
      output: {
        name: "",
        type: 5,
        typeArguments: [
          {
            name: "",
            type: 4,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "order",
          type: 11,
          typeArguments: null,
        },
      ],
      name: "place_order",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "renounce_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "fee",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "set_protocol_fee",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "new_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      name: "transfer_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 13,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 12,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class StrategyFixedPriceSaleAbi__factory {
  static readonly abi = _abi;
  static createInterface(): StrategyFixedPriceSaleAbiInterface {
    return new Interface(_abi) as unknown as StrategyFixedPriceSaleAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): StrategyFixedPriceSaleAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as StrategyFixedPriceSaleAbi;
  }
}
