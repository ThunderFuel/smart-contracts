/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type RoyaltyInfoInput = {
  collection: ContractIdInput;
  receiver: IdentityInput;
  fee: BigNumberish;
};

export type RoyaltyInfoOutput = {
  collection: ContractIdOutput;
  receiver: IdentityOutput;
  fee: BN;
};

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

export type OptionalRoyaltyInfoInput = Option<RoyaltyInfoInput>;

export type OptionalRoyaltyInfoOutput = Option<RoyaltyInfoOutput>;

export type OptionalIdentityInput = Option<IdentityInput>;

export type OptionalIdentityOutput = Option<IdentityOutput>;

interface RoyaltyManagerAbiInterface extends Interface {
  functions: {
    get_royalty_fee_limit: FunctionFragment;
    get_royalty_info: FunctionFragment;
    initialize: FunctionFragment;
    owner: FunctionFragment;
    register_royalty_info: FunctionFragment;
    renounce_ownership: FunctionFragment;
    set_royalty_fee_limit: FunctionFragment;
    transfer_ownership: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "get_royalty_fee_limit",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_royalty_info",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(functionFragment: "owner", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "register_royalty_info",
    values: [ContractIdInput, IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "renounce_ownership",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_royalty_fee_limit",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_ownership",
    values: [IdentityInput]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "get_royalty_fee_limit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_royalty_info",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "initialize",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "owner", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "register_royalty_info",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "renounce_ownership",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_royalty_fee_limit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_ownership",
    data: BytesLike
  ): DecodedValue;
}

export class RoyaltyManagerAbi extends Contract {
  interface: RoyaltyManagerAbiInterface;
  functions: {
    get_royalty_fee_limit: InvokeFunction<[], BN>;

    get_royalty_info: InvokeFunction<
      [collection: ContractIdInput],
      OptionalRoyaltyInfoOutput
    >;

    initialize: InvokeFunction<[], void>;

    owner: InvokeFunction<[], OptionalIdentityOutput>;

    register_royalty_info: InvokeFunction<
      [collection: ContractIdInput, receiver: IdentityInput, fee: BigNumberish],
      void
    >;

    renounce_ownership: InvokeFunction<[], void>;

    set_royalty_fee_limit: InvokeFunction<[new_fee_limit: BigNumberish], void>;

    transfer_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
  };
}
