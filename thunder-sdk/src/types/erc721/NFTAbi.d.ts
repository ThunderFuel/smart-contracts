/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.38.1
  Forc version: 0.35.5
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export type AccessErrorInput = Enum<{ SenderCannotSetAccessControl: [], SenderNotAdmin: [], SenderNotOwner: [], SenderNotOwnerOrApproved: [] }>;
export type AccessErrorOutput = AccessErrorInput;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type InputErrorInput = Enum<{ AdminDoesNotExist: [], ApprovedDoesNotExist: [], NotEnoughTokensToMint: [], OwnerDoesNotExist: [], TokenDoesNotExist: [], TokenSupplyCannotBeZero: [] }>;
export type InputErrorOutput = InputErrorInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ApprovalInput = { owner: IdentityInput, approved: IdentityInput, tokenId: BigNumberish };
export type ApprovalOutput = { owner: IdentityOutput, approved: IdentityOutput, tokenId: BN };
export type ApprovalForAllInput = { owner: IdentityInput, operator: IdentityInput, approved: boolean };
export type ApprovalForAllOutput = { owner: IdentityOutput, operator: IdentityOutput, approved: boolean };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };
export type TokenMetaDataInput = { name: string, symbol: string, token_uri: [string, BigNumberish] };
export type TokenMetaDataOutput = { name: string, symbol: string, token_uri: [string, BN] };
export type TransferInput = { from: IdentityInput, to: IdentityInput, tokenId: BigNumberish };
export type TransferOutput = { from: IdentityOutput, to: IdentityOutput, tokenId: BN };

interface NFTAbiInterface extends Interface {
  functions: {
    approve: FunctionFragment;
    balanceOf: FunctionFragment;
    getApproved: FunctionFragment;
    initialize: FunctionFragment;
    isApprovedForAll: FunctionFragment;
    maxSupply: FunctionFragment;
    metadata: FunctionFragment;
    mint: FunctionFragment;
    owner: FunctionFragment;
    ownerOf: FunctionFragment;
    safeTransferFrom: FunctionFragment;
    setApprovalForAll: FunctionFragment;
    supportsInterface: FunctionFragment;
    totalSupply: FunctionFragment;
    transferFrom: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'approve', values: [IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'balanceOf', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: [BigNumberish, ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [IdentityInput, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'maxSupply', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'metadata', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'owner', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'safeTransferFrom', values: [IdentityInput, IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [IdentityInput, boolean]): Uint8Array;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'totalSupply', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'transferFrom', values: [IdentityInput, IdentityInput, BigNumberish]): Uint8Array;

  decodeFunctionData(functionFragment: 'approve', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balanceOf', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'getApproved', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'isApprovedForAll', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'maxSupply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'metadata', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'ownerOf', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'safeTransferFrom', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'setApprovalForAll', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'supportsInterface', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'totalSupply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transferFrom', data: BytesLike): DecodedValue;
}

export class NFTAbi extends Contract {
  interface: NFTAbiInterface;
  functions: {
    approve: InvokeFunction<[to: IdentityInput, tokenId: BigNumberish], void>;
    balanceOf: InvokeFunction<[user: IdentityInput], BN>;
    getApproved: InvokeFunction<[tokenId: BigNumberish], IdentityOutput>;
    initialize: InvokeFunction<[maxSupply: BigNumberish, transferManager: ContractIdInput], void>;
    isApprovedForAll: InvokeFunction<[user: IdentityInput, operator: IdentityInput], boolean>;
    maxSupply: InvokeFunction<[], BN>;
    metadata: InvokeFunction<[tokenId: BigNumberish], TokenMetaDataOutput>;
    mint: InvokeFunction<[amount: BigNumberish, to: IdentityInput], void>;
    owner: InvokeFunction<[], Option<IdentityOutput>>;
    ownerOf: InvokeFunction<[tokenId: BigNumberish], IdentityOutput>;
    safeTransferFrom: InvokeFunction<[from: IdentityInput, to: IdentityInput, tokenId: BigNumberish], void>;
    setApprovalForAll: InvokeFunction<[operator: IdentityInput, approved: boolean], void>;
    supportsInterface: InvokeFunction<[interfaceId: BigNumberish], boolean>;
    totalSupply: InvokeFunction<[], BN>;
    transferFrom: InvokeFunction<[from: IdentityInput, to: IdentityInput, tokenId: BigNumberish], void>;
  };
}
