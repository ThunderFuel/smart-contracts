/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type TokenMetaDataInput = {
  name: string;
  symbol: string;
  token_uri: [string, BigNumberish];
};

export type TokenMetaDataOutput = {
  name: string;
  symbol: string;
  token_uri: [string, BN];
};

export type ListedNFTInput = {
  contract_Id: ContractIdInput;
  token_id: BigNumberish;
  meta_data: TokenMetaDataInput;
  owner: IdentityInput;
  asset_id: ContractIdInput;
  price: BigNumberish;
};

export type ListedNFTOutput = {
  contract_Id: ContractIdOutput;
  token_id: BN;
  meta_data: TokenMetaDataOutput;
  owner: IdentityOutput;
  asset_id: ContractIdOutput;
  price: BN;
};

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface NftMarketplaceAbiInterface extends Interface {
  functions: {
    admin: FunctionFragment;
    fee_receiver: FunctionFragment;
    pause: FunctionFragment;
    initialized: FunctionFragment;
    protocol_fee: FunctionFragment;
    is_listed: FunctionFragment;
    listed_nft: FunctionFragment;
    supported_asset: FunctionFragment;
    constructor: FunctionFragment;
    list_nft: FunctionFragment;
    delete_listing: FunctionFragment;
    update_price: FunctionFragment;
    purchase_nft: FunctionFragment;
    set_admin: FunctionFragment;
    set_fee_receiver: FunctionFragment;
    set_pause: FunctionFragment;
    set_protocol_fee: FunctionFragment;
    add_supported_asset: FunctionFragment;
    remove_supported_asset: FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "fee_receiver",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(functionFragment: "pause", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "protocol_fee",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "is_listed",
    values: [ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "listed_nft",
    values: [ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "supported_asset",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "constructor",
    values: [AddressInput, IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "list_nft",
    values: [ContractIdInput, BigNumberish, ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "delete_listing",
    values: [ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "update_price",
    values: [ContractIdInput, BigNumberish, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "purchase_nft",
    values: [ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_admin",
    values: [AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_fee_receiver",
    values: [IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_pause",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_protocol_fee",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "add_supported_asset",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "remove_supported_asset",
    values: [ContractIdInput]
  ): Uint8Array;

  decodeFunctionData(functionFragment: "admin", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "fee_receiver",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "pause", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "initialized",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "protocol_fee",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "is_listed",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "listed_nft",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "supported_asset",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "constructor",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "list_nft",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "delete_listing",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "update_price",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "purchase_nft",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_admin",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_fee_receiver",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_pause",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_protocol_fee",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "add_supported_asset",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "remove_supported_asset",
    data: BytesLike
  ): DecodedValue;
}

export class NftMarketplaceAbi extends Contract {
  interface: NftMarketplaceAbiInterface;
  functions: {
    admin: InvokeFunction<[], AddressOutput>;

    fee_receiver: InvokeFunction<[], IdentityOutput>;

    pause: InvokeFunction<[], boolean>;

    initialized: InvokeFunction<[], boolean>;

    protocol_fee: InvokeFunction<[], BN>;

    is_listed: InvokeFunction<
      [contract_Id: ContractIdInput, token_id: BigNumberish],
      boolean
    >;

    listed_nft: InvokeFunction<
      [contract_Id: ContractIdInput, token_id: BigNumberish],
      ListedNFTOutput
    >;

    supported_asset: InvokeFunction<[asset_id: ContractIdInput], boolean>;

    constructor: InvokeFunction<
      [admin: AddressInput, receiver: IdentityInput, fee: BigNumberish],
      void
    >;

    list_nft: InvokeFunction<
      [
        contract_Id: ContractIdInput,
        token_id: BigNumberish,
        asset_id: ContractIdInput,
        price: BigNumberish
      ],
      void
    >;

    delete_listing: InvokeFunction<
      [contract_Id: ContractIdInput, token_id: BigNumberish],
      void
    >;

    update_price: InvokeFunction<
      [
        contract_Id: ContractIdInput,
        token_id: BigNumberish,
        new_price: BigNumberish
      ],
      void
    >;

    purchase_nft: InvokeFunction<
      [contract_Id: ContractIdInput, token_id: BigNumberish],
      void
    >;

    set_admin: InvokeFunction<[admin: AddressInput], void>;

    set_fee_receiver: InvokeFunction<[receiver: IdentityInput], void>;

    set_pause: InvokeFunction<[], void>;

    set_protocol_fee: InvokeFunction<[new_fee: BigNumberish], void>;

    add_supported_asset: InvokeFunction<[asset_id: ContractIdInput], void>;

    remove_supported_asset: InvokeFunction<[asset_id: ContractIdInput], void>;
  };
}
